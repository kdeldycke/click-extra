---
name: Tests
"on":
  push:
    branches:
      - main
  pull_request:
  schedule:
    # Run tests every Monday at 9:17 to catch regressions.
    - cron: "17 9 * * 1"

# XXX Concurrency detection sucks and jobs gets killed randonmly.
# concurrency:
#   # Group workflow jobs so new commits cancels in-progress execution triggered by previous commits.
#   # Source: https://mail.python.org/archives/list/pypa-committers@python.org/thread/PCBCQMJF64JGRBOX7E2EE4YLKHT4DI55/
#   group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
#   cancel-in-progress: true

jobs:

  test-matrix:
    # There is no way to selective flags collections of elements in a matrix, without having to flag all combinations.
    # This will became unmaintainable and tedious so we use this job to pre-compute which jobs is going to get our
    # "stable" flag.
    name: "OS/Python/stable matrix pre-compute"
    runs-on: ubuntu-22.04
    outputs:
      test_matrix: ${{ steps.create_matrix.outputs.matrix }}
    steps:
      - name: Create JSON matrix
        id: create_matrix
        shell: python
        run: |
          import json
          import os
          from itertools import product
          from pathlib import Path

          # See what each os came pre-installed with at:
          # https://help.github.com/en/actions/reference/software-installed-on-github-hosted-runners
          os_list = {
              "ubuntu-22.04",
              "ubuntu-20.04",
              "macos-12",
              "macos-11",
              "windows-2022",
              "windows-2019",
          }
          python_list = {
              "3.7",
              "3.8",
              "3.9",
              "3.10",
              "3.11",
              "3.12-dev",
          }
          # Safety check to ensure there is no overlap between the 2 sets.
          assert not os_list.intersection(python_list)

          # List of unstable criterions.
          unstable = [
              # XXX Pip with Python 3.12-dev on Windows has some issues:
              #
              #       def _handle_ns(packageName, path_item):
              #           """Ensure that named package includes a subpath of path_item (if needed)"""
              #
              #           importer = get_importer(path_item)
              #           if importer is None:
              #               return None
              #
              #           # capture warnings due to #1111
              #           with warnings.catch_warnings():
              #               warnings.simplefilter("ignore")
              #   >           loader = importer.find_module(packageName)
              #
              #   E           AttributeError: 'zipimporter' object has no attribute 'find_module'.
              #               Did you mean: 'load_module'?
              #
              # This has been reported upstream at: https://github.com/pypa/pip/issues/11688
              {"3.12-dev", "windows-2022"},
              {"3.12-dev", "windows-2019"},
          ]

          jobs = []
          for os_id, python_version in product(os_list, python_list):
              job = {
                  "os": os_id,
                  "python-version": python_version,
                  "state": "stable",
              }
              for criterion in unstable:
                  if criterion.issubset(job.values()):
                      job["state"] = "unstable"
                      break
              jobs.append(job)
          matrix = json.dumps({"include": jobs})

          env_file = Path(os.getenv("GITHUB_OUTPUT"))
          env_file.write_text(f"matrix={matrix}")

      - name: Print JSON matrix
        run: |
          echo '${{ steps.create_matrix.outputs.matrix }}'
          jq -aR <<< echo '${{ steps.create_matrix.outputs.matrix }}'

  tests:
    needs:
      - test-matrix
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.test-matrix.outputs.test_matrix) }}
    runs-on: ${{ matrix.os }}
    # We keep going when a job flagged as not stable fails.
    continue-on-error: ${{ matrix.state == 'unstable' }}
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4.4.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install click-extra and its dependencies
        run: |
          python -m pip install --upgrade setuptools pip
          python -m pip install --upgrade poetry
          poetry install --no-interaction --no-ansi

      # XXX Execute each test suite separately. That way we bypass a bug with our @extra_group() and @extra_command()
      # decorators which I have not identified yet. Suspected issues are:
      #   https://github.com/pallets/click/issues/2294
      #   https://github.com/pallets/click/pull/2312
      # XXX Hard-coding random seeds is the worse thing ever but at least it will catch regressions while we search
      # for the root cause and leaking code.
      # pyproject.toml config file is specified at CLI level instead of letting coverage find it because of this bug:
      #   https://github.com/nedbat/coveragepy/issues/512#issuecomment-399707938
      #   https://github.com/pytest-dev/pytest-cov/issues/168#issuecomment-327533847
      #   https://github.com/pytest-dev/pytest-cov/issues/243
      - name: Tests - Linux and macOS
        if: runner.os != 'Windows'
        env:
          DESTRUCTIVE_TESTS: true
        run: |
          poetry run pytest --randomly-seed=2892842890 --cov-config=pyproject.toml --cov=./ --cov-report=xml \
          click_extra/tests/test_colorize.py \
          click_extra/tests/test_version.py

          poetry run pytest --randomly-seed=1927446530 --cov-config=pyproject.toml --cov=./ --cov-report=xml \
          click_extra/tests/test_commands.py

          poetry run pytest --randomly-seed=498379502 --cov-config=pyproject.toml --cov=./ --cov-report=xml \
          click_extra/tests/test_config.py

          poetry run pytest --randomly-seed=3568961045 --cov-config=pyproject.toml --cov=./ --cov-report=xml \
          click_extra/tests/test_logging.py

          poetry run pytest --cov-config=pyproject.toml --cov=./ --cov-report=xml \
          click_extra/tests/test_platforms.py \
          click_extra/tests/test_pygments.py \
          click_extra/tests/test_run.py \
          click_extra/tests/test_tabulate.py

      # XXX We need a different step for windows because PowerShell line-continuation is not a slash but a backtick.
      - name: Tests - Windows
        if: runner.os == 'Windows'
        env:
          DESTRUCTIVE_TESTS: true
        run: |
          poetry run pytest --randomly-seed=2892842890 --cov-config=pyproject.toml --cov=./ --cov-report=xml `
          click_extra/tests/test_colorize.py `
          click_extra/tests/test_version.py

          poetry run pytest --randomly-seed=1927446530 --cov-config=pyproject.toml --cov=./ --cov-report=xml `
          click_extra/tests/test_commands.py

          poetry run pytest --randomly-seed=498379502 --cov-config=pyproject.toml --cov=./ --cov-report=xml `
          click_extra/tests/test_config.py

          poetry run pytest --randomly-seed=3568961045 --cov-config=pyproject.toml --cov=./ --cov-report=xml `
          click_extra/tests/test_logging.py

          poetry run pytest --cov-config=pyproject.toml --cov=./ --cov-report=xml `
          click_extra/tests/test_platforms.py `
          click_extra/tests/test_pygments.py `
          click_extra/tests/test_run.py `
          click_extra/tests/test_tabulate.py

      - name: Codecov upload
        uses: codecov/codecov-action@v3.1.1
